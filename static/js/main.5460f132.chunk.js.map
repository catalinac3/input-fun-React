{"version":3,"sources":["ValidationComponent/ValidationComponent.js","CharComponent/CharComponent.js","App.js","reportWebVitals.js","index.js"],"names":["validationComponent","props","validation","textLength","CharComponent","onClick","click","style","className","letter","App","state","long","content","handleChange","event","setState","target","value","length","deleteChars","charIndex","wordList","split","splice","join","this","colors","letters","map","char","index","color","Math","floor","random","backgroundColor","type","onChange","ValidationComponent","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAUeA,EARa,SAACC,GAC3B,OACE,gCACE,8BAAIA,EAAMC,WAAV,wBAA2CD,EAAME,cACjD,uECISC,G,MAPO,SAACH,GACrB,OACE,qBAAKI,QAASJ,EAAMK,MAAOC,MAAON,EAAMM,MAAOC,UAAU,YAAzD,SACE,kCAAKP,EAAMQ,cC0EFC,E,4MA1EbC,MAAQ,CACNC,KAAM,IACNC,QAAS,I,EAGXC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZJ,KAAMG,EAAME,OAAOC,MAAMC,OACzBN,QAASE,EAAME,OAAOC,S,EAI1BE,YAAc,SAACC,GAEb,IAAMC,EAAQ,YAAO,EAAKX,MAAME,QAAQU,MAAM,KAE9CD,EAASE,OAAOH,EAAW,GAC3B,EAAKL,SAAS,CACZJ,KAAMU,EAASG,KAAK,IAAIN,OACxBN,QAASS,EAASG,KAAK,O,4CAI3B,WAAU,IAAD,OACHvB,EAAa,KACbwB,KAAKf,MAAMC,KAAO,EACpBV,EAAa,kBACJwB,KAAKf,MAAMC,MAAQ,IAC5BV,EAAa,wBAGf,IAAMyB,EAAS,CACb,sBACA,qBACA,qBACA,uBAGEC,EACF,8BACGF,KAAKf,MAAME,QAAQU,MAAM,IAAIM,KAAI,SAACC,EAAMC,GACvC,IAAMC,EAAQL,EAAOM,KAAKC,MAAMD,KAAKE,SAAWR,EAAOR,SACvD,OACE,cAAC,EAAD,CAEEZ,MAAO,CACL6B,gBAAiBJ,GAEnB1B,MAAO,kBAAM,EAAKc,YAAYW,IAC9BtB,OAAQqB,GANV,UACUA,EADV,cACoBC,SAY5B,OACE,sBAAKvB,UAAU,MAAf,UACE,oEACA,uBACE6B,KAAK,OACLC,SAAUZ,KAAKZ,aACfI,MAAOQ,KAAKf,MAAME,UAEpB,cAAC0B,EAAD,CACEpC,WAAYuB,KAAKf,MAAMC,KACvBV,WAAYA,IAEb0B,S,GAtESY,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5460f132.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst validationComponent = (props) => {\r\n  return (\r\n    <div>\r\n      <p>{props.validation} the text length is: {props.textLength}</p>\r\n      <p>To erase a letter just click on it</p>\r\n    </div>\r\n  );\r\n};\r\nexport default validationComponent;\r\n","import React from \"react\";\r\nimport \"./CharComponent.css\";\r\n\r\nconst CharComponent = (props) => {\r\n  return (\r\n    <div onClick={props.click} style={props.style} className=\"char-comp\">\r\n      <p> {props.letter}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default CharComponent;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport ValidationComponent from \"./ValidationComponent/ValidationComponent\";\nimport CharComponent from \"./CharComponent/CharComponent\";\nclass App extends Component {\n  // state is an js object.\n  state = {\n    long: \"0\",\n    content: \"\",\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      long: event.target.value.length,\n      content: event.target.value,\n    });\n  };\n\n  deleteChars = (charIndex) => {\n    //copies array\n    const wordList = [...this.state.content.split(\"\")];\n    //deletes an array item from a list on the given index\n    wordList.splice(charIndex, 1);\n    this.setState({\n      long: wordList.join(\"\").length,\n      content: wordList.join(\"\"),\n    });\n  };\n\n  render() {\n    let validation = null;\n    if (this.state.long < 5) {\n      validation = \"Text too short,\";\n    } else if (this.state.long >= 5) {\n      validation = \"Text is long enough,\";\n    }\n\n    const colors = [\n      \"rgba(235,64,52,0.3)\",\n      \"rgba(29,43,74,0.3)\",\n      \"rgba(69,29,74,0.3)\",\n      \"rgba(163,73,31,0.3)\",\n    ];\n\n    let letters = (\n      <div>\n        {this.state.content.split(\"\").map((char, index) => {\n          const color = colors[Math.floor(Math.random() * colors.length)];\n          return (\n            <CharComponent\n              key={`${char} + ${index}`}\n              style={{\n                backgroundColor: color,\n              }}\n              click={() => this.deleteChars(index)}\n              letter={char}\n            ></CharComponent>\n          );\n        })}\n      </div>\n    );\n\n    return (\n      <div className=\"App\">\n        <h2>Write some text on the input field</h2>\n        <input\n          type=\"text\"\n          onChange={this.handleChange}\n          value={this.state.content}\n        ></input>\n        <ValidationComponent\n          textLength={this.state.long}\n          validation={validation}\n        />\n        {letters}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}